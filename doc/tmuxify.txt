*tmuxify.txt* Handling panes like a boss.
*tmuxify*
            __                                     ___
           /\ \__                            __  /'___\
           \ \ ,_\   ___ ___   __  __  __  _/\_\/\ \__/  __  __
            \ \ \/ /' __` __`\/\ \/\ \/\ \/'\/\ \ \ ,__\/\ \/\ \
             \ \ \_/\ \/\ \/\ \ \ \_\ \/>  </\ \ \ \ \_/\ \ \_\ \
              \ \__\ \_\ \_\ \_\ \____//\_/\_\\ \_\ \_\  \/`____ \
               \/__/\/_/\/_/\/_/\/___/ \//\/_/ \/_/\/_/   `/___/> \
                                                             /\___/
                                                             \/__/
  by Marco Hinz~

  Twitter: https://twitter.com/_mhinz_
  Github:  http://github.com/mhinz
  IRC:     mhi^ (Freenode)
>
  If you use any of my plugins, please star them on github. It's a great way
  of getting feedback and gives me the kick to put more time into their
  development.

  If you encounter any bugs or have feature requests, just open an issue
  report on Github.

  Thank you for flying mhi^ airlines. Get the Vim on!

==============================================================================
TOC                                                           *tmuxify-contents*

         INTRO .......................... |tmuxify-intro|
         OPTIONS ........................ |tmuxify-options|
         MAPPINGS ....................... |tmuxify-mappings|

==============================================================================
INTRO                                                            *tmuxify-intro*

tmuxify is a plugin for handling tmux panes:

  - create/kill associated panes

  - associate tmuxify to already existing panes

  - send visually highlighted lines to the associated pane

  - send to pane by prompting for input

  - send to pane by setting a run command for the current filetype

  - cancel copy-mode on associated panes

  - once set, run commands are remembered, but can easily be reset

  - all the plugin configuration happens in one dictionary that holds
    filetypes as keys and run commands as values

==============================================================================
OPTIONS                                                        *tmuxify-options*

Put these variables into your vimrc for great enjoyment. The shown examples
are also the default values.

------------------------------------------------------------------------------
>
    let g:tmuxify_custom_command = 'tmux split-window -d'
<
Use this option if you want to overwrite that default command for creating a
new pane.

Examples:~

Horizontal split / height is 20% of screen size:
>
    let g:tmuxify_custom_command = 'tmux split-window -p 20'
<
Horizontal split / don't switch to pane / height of 10 lines:
>
    let g:tmuxify_custom_command = 'tmux split-window -d -l 10'
<
Vertical split / width of 20 columns:
>
    let g:tmuxify_custom_command = 'tmux split-window -v -l 20'
<
------------------------------------------------------------------------------
>
    let g:tmuxify_map_prefix = '<leader>m'
<
What to start mappings with. Set it to '' to disable mappings.

>
    let g:tmuxify_global_maps = 0
<
Whether default mappings should use global tmux panes or buffer specific ones.
Default is 0, which uses buffer specific maps.

------------------------------------------------------------------------------
>
    let g:tmuxify_run = {}
<
Set run commands for specific filetypes. '%' will be replaced by the full path
to the current buffer.

Example:~
>
    let g:tmuxify_run = {
        \ 'sh': 'bash %',
        \ 'go': 'go build %',
        \}
<
==============================================================================
MAPPINGS                                                      *tmuxify-mappings*

This plugin comes with a bunch for normal mode mappings.
NOTE: The following commands, with the exception of TxSetRunCmd, can be used
with a bang operator (e.g., :TxCreate!) in order to work with a 'global' pane,
which is shared among all buffers in an instance of vim. Without a bang, all
associated tmux panes will be buffer specific.

------------------------------------------------------------------------------
>
    <leader>mn
<
Executes :TxCreate. Creates a new pane and associates with it.

------------------------------------------------------------------------------
>
    <leader>mq
<
Executes :TxKill. Closes the associated pane.

------------------------------------------------------------------------------
>
    <leader>mv
<
Executes :TxUncopy. Cancels copy mode in the associated pane.

------------------------------------------------------------------------------
>
    <leader>ms
<
Executes :TxSend. Prompts for input and sends it to the associated pane. This
mapping also works on visual selections.

------------------------------------------------------------------------------
>
    <leader>mk
<
Executes :TxSendKey. Prompts for input and sends it to the associated pane as
keys.

------------------------------------------------------------------------------
>
    <leader>mr
<
Executes :TxRun. Prompts for input if there is no entry in g:tmuxify_run for
the current filetype. '%' will be replaced by the full path to the current
buffer.

------------------------------------------------------------------------------
>
    <leader>mt
<
Executes :TxSetRunCmd. Change the run command for the current filetype.

------------------------------------------------------------------------------
>
    <leader>mp
<
Executes :TxSetPane. Associate an already existing pane with tmuxify.

NOTE: You can use tab completion here.

------------------------------------------------------------------------------
>
    <leader>mc
<
Executes :TxClear. Sends ctrl+l to the associated pane.

------------------------------------------------------------------------------
>
    <leader>mb
<
Executes :TxSigInt. Sends ctrl+c to the associated pane.

==============================================================================
vim: tw=78
